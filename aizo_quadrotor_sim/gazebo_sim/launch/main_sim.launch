<?xml version="1.0" encoding="UTF-8"?>
<launch>
    <!-- robot name -->
  <arg name="uav_name" default="quadrotor" />  
  <arg name="uav_type" default="falcon4_os1_16_256"/>
  <!-- robot base-link name -->
  <arg name="robot_base_link" default="$(arg uav_name)/base_link"/> 
  <!-- lidar's frame name in the tf tree -->
  <arg name="lidar_frame" default="lidar"/>
  <!-- mass of the robot -->
  <arg name="mass" default="1.0" /> 
  <!-- point cloud topic name -->
  <!-- <arg name="lidar_cloud_topic" default="/falcon4/os1_cloud_node/points" /> -->
  <!-- robot odometry topic name -->
  <arg name="gt_odom" default="ground_truth/odom"/> 
  <arg name="odom_topic" default="/quadrotor/odom"/>
  <!-- use dispersion based motion planning algorithm (only for internal use) --> 
  <arg name="min_dispersion_planner" default="false" />
  <!-- if use onboard sensing, set it to be true and set odom to be ukf_odom /> -->
  <arg name="onboard_sensing" default="false"/>

  <!-- color in robot model rviz -->
  <arg name="color/r" default="0.0"/>
  <arg name="color/g" default="0.0"/>
  <arg name="color/b" default="1.0"/>
  <arg name="color/a" default="0.7"/>
  

  <!-- launch the Gazebo simulator --> 
  <arg name="launch_sim" default="true"/>
  <!-- robot takeoff height /> -->
  <arg name="takeoff_height" default="1.0"/>
  <!-- robot initial spawn positions -->
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="1.0"/>
  <arg name="yaw" default="-0.0"/>
  <!-- control gains config file -->
  <arg name="gains_file" default="$(find aizo_quadrotor_launch)/config/gains_hummingbird.yaml"/>
  <!-- several example world, check out aizo_quadrotor/aizo_simulator_description/worlds for all examples --> 
  <!-- example 1: testbed large scale lv1 -->   
  <arg name="world_model" default="testbed_large_lv1" />
  <!-- example 2: testbed large scale lv2-->
  <!-- <arg name="world_model" default="testbed_large_lv2" /> -->
  <!-- example 3: testbed large scale lv3-->
  <!-- <arg name="world_model" default="testbed_large_lv3" /> -->

  <env name="GAZEBO_MODEL_PATH" value="$(find aizo_simulator_description)/models/$(arg world_model)/models:$(optenv GAZEBO_MODEL_PATH)" />

  <include if="$(arg launch_sim)" file="$(find gazebo_sim)/launch/simulation_gazebo.launch">
    <arg name="odom" value="$(arg gt_odom)"/>  
    <arg name="uav_name" value="$(arg uav_name)"/>
    <arg name="uav_type" value="$(arg uav_type)"/>
    <arg name="world" value="$(arg world_model)"/>
    <arg name="x" value="$(arg x)"/>
    <arg name="y" value="$(arg y)"/>
    <arg name="z" value="$(arg z)"/>
    <arg name="yaw" value="$(arg yaw)"/>
  </include>

  <!-- Publish tfs -->
  <group ns="$(arg uav_name)">
    <!-- robot/map tp map -->
    <!-- (need this because other modules use robot/map as map_frame_id)   -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg uav_name)_map_map_tf"
        args="0.0 0.0 0.0 0.0 0.0 0.0 $(arg uav_name)/map map"/>

    <!-- map to robot -->
    <node name="$(arg uav_name)_odom_to_tf" pkg="aizo_quadrotor_utils" type="msg_to_tf" output="screen">
        <remap from="~msg" to="odom"/>
    </node>

    <!-- robot_base_link to robot -->
    <!-- (need this because other modules use robot as robot_frame_id) -->
    <node pkg="tf2_ros" name="$(arg uav_name)_base_link_tf" type="static_transform_publisher"
        args="0.0 0.0 0.0 0.0 0.0 0.0 $(arg robot_base_link) $(arg uav_name)"/>

    <!-- robot to lidar  -->
    <!-- <node pkg="tf2_ros" type="static_transform_publisher"
        name="$(arg uav_name)_lidar_tf"
        args="0.0 0.0 0.1 0.0 0.0 0.0 $(arg uav_name) $(arg lidar_frame)"/> -->
    
    <!-- map (SLAM reference frame) to odom (odometry reference frame) tf, which is initialized to be identity since initial drift of odometry is 0 -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="tf_map_odom" args="0 0 0 0 0 0 $(arg uav_name)/map $(arg uav_name)/odom"/>
    <node pkg="tf2_ros" type="static_transform_publisher" name="tf_world_map" args="0 0 0 0 0 0 world $(arg uav_name)/map"/>
    <node pkg="tf2_ros" type="static_transform_publisher" name="tf_world" args="0 0 0 0 0 0 $(arg robot_base_link) base_link"/>
  </group>

  <!-- <include file="$(find gazebo_sim)/launch/robot_bringup.launch">
    <arg name="uav_name" value="$(arg uav_name)" />
    <arg name="mass" value="$(arg mass)" />
  </include> -->

  <!-- <include file="$(find kr_mav_launch)/launch/mesh_vis.launch">
    <arg name="mav_name" value="$(arg uav_name)"/>
    <arg name="mav_type" value="$(arg uav_type)"/>
    <arg name="odom_topic" value="$(arg odom_topic)"/>
    <arg name="color/r" value="$(arg color/r)"/>
    <arg name="color/g" value="$(arg color/g)"/>
    <arg name="color/b" value="$(arg color/b)"/>
    <arg name="color/a" value="$(arg color/a)"/>
  </include> -->

  <include file="$(find state_machine_launch)/launch/system_mp.launch">
    <arg name="onboard_sensing" value="$(arg onboard_sensing)" />
    <arg name="robot" value="$(arg uav_name)" />
    <arg name="mass" value="$(arg mass)" />
    <arg name="min_dispersion_planner" value="$(arg min_dispersion_planner)" />
    <arg name="takeoff_height" value="$(arg takeoff_height)" />
    <arg name="gains_file" value="$(arg gains_file)"/>
  </include>

  <include file="$(find gazebo_sim)/launch/gui_rviz.launch">
    <arg name="uav_name" value="$(arg uav_name)" />
  </include>

  <!-- <node name= "depthimage_to_laserscan" pkg="depthimage_to_laserscan" type="depthimage_to_laserscan">
    <remap from="image" to="/quadrotor/camera/depth/image_rect_raw" />
    <remap from="camera_info" to="/quadrotor/camera/depth/camera_info"/>
  </node> -->
</launch>